library(rixmpRet)
remove.packages("rixmpRet", lib="~/R/R-3.4.3/library")
library(rixmpRet)
remove.packages("rixmpRet", lib="~/R/R-3.4.3/library")
library(rixmpRet)
library(rixmpRet)
horizon = as.integer(seq(2010, 2040, 10))
country = "Austria"
base_technical_lifetime = data.frame(
node_loc = country,
year_vtg = horizon,
unit = 'y'
)
lifetimes = list(
coal_ppl = 40,
gas_ppl =  30,
oil_ppl = 30,
bio_ppl =  30,
hydro_ppl = 60,
wind_ppl = 20,
solar_pv_ppl = 20,
bulb = 1,
cfl = 10
)
data.frame(base_technical_lifetime, technology=names(lifetimes[1]), value=lifetimes[[1]])
base_growth = data.frame(
node_loc = country,
year_act = horizon[1:],
value = 0.05,
time = 'year',
unit = '%'
)
growth_technologies = c(
"coal_ppl",
"gas_ppl",
"oil_ppl",
"bio_ppl",
"hydro_ppl",
"wind_ppl",
"solar_pv_ppl",
"cfl",
"bulb"
)
for (tec in (growth_technologies)){
df = data.frame(base_growth, technology= tec)
scenario$add_par('growth_activity_up', adapt_to_ret(df))
}
horizon[1:ncol(horizon)]
horizon[1:3]
ncol(horizon)
horizon[1:length(horizon)]
horizon[-1]
activity = list(
coal_ppl = 7184,
gas_ppl =  14346,
oil_ppl =  1275,
hydro_ppl = 38406,
bio_ppl =  4554,
wind_ppl = 2064,
solar_pv_ppl = 89,
import = 2340,
cfl = 0
)
capacity_factor = list(
coal_ppl = 0.85,
gas_ppl =  0.75,
oil_ppl = 0.75,
bio_ppl = 0.75,
hydro_ppl = 0.5,
wind_ppl = 0.2,
solar_pv_ppl = 0.15,
bulb = 0.1,
cfl =  0.1
)
as.data.frame(activity)
as.data.frame(t(activity))
t(as.data.frame(activity))
t(unlist(activity))
unlist(activity)
as.data.frame(t(as.data.frame(activity)))
a = as.data.frame(t(as.data.frame(activity)))
capacity_factor[,2]
capacity_factor[[,2]]
capacity_factor[[2]]
a = as.data.frame(t(as.data.frame(activity)))
b = as.data.frame(t(as.data.frame(capacity_factor)))
View(a)
View(b)
b[,2]
row.names(a)
library(tidyverse)
View(a)
a = as.data.frame(t(as.data.frame(activity))) %>% rename(act = V1)
b = as.data.frame(t(as.data.frame(capacity_factor)))%>% rename(cf = V1)
capacity = a %>% bind_cols(b$V1) %>%
technology = row.names(a) %>%
value = act / 8760 / cf %>%
filter(!is.na())
View(a)
View(b)
capacity = a %>% bind_cols(b$V1) %>%
mutate(technology = row.names(a)) %>%
murate(value = (act / 8760 / cf)) %>%
filter(!is.na())
capacity = a %>% bind_cols(b$V1) %>%
mutate(technology = row.names(a)) %>%
mutate(value = (act / 8760 / cf)) %>%
filter(!is.na())
View(b)
capacity = a %>% bind_cols(b$cf) %>%
mutate(technology = row.names(a)) %>%
mutate(value = (act / 8760 / cf)) %>%
filter(!is.na())
a = as.data.frame(t(as.data.frame(activity))) %>% rename(act = V1) %>%
mutate(technology = row.names(a))
b = as.data.frame(t(as.data.frame(capacity_factor)))%>% rename(cf = V1) %>%
mutate(technology = row.names(b))
capacity = left_join(a,b)
View(capacity)
capacity = left_join(a,b) %>%
mutate(value = (act / 8760 / cf)) %>%
filter(!is.na())
capacity = left_join(a,b) %>%
mutate(value = (act / 8760 / cf)) %>%
filter(!is.na(value))
View(capacity)
capacity$technology
capacity$technology[4]
data.frame(base_capacity, technology=capacity$technology[1], value=capacity$value[1])
base_capacity = data.frame(
node_loc = country,
year_vtg = c(2010),
unit = 'GWa'
)
data.frame(base_capacity, technology=capacity$technology[1], value=capacity$value[1])
capacity = left_join(a,b) %>%
mutate(value = (act / 8760 / cf)) %>%
filter(!is.na(value)) %>%
select(technology,value)
capacity
data.frame(base_capacity, capcity)
data.frame(base_capacity, capacity)
base_emissions = data.frame(
node_loc = country,
year_vtg = vintage_years,
year_act = act_years,
mode = 'standard',
unit = 'kg/kWa' # actually is tCO2/GWa
)
# units: tCO2/MWh
emissions = list(
coal_ppl =  c('CO2', 0.854),
gas_ppl =   c('CO2', 0.339),
oil_ppl =   c('CO2', 0.57)
)
names(emission[1])
names(emissions[1])
emissions[[1]]
emissions[[1]][1]
emissions[[1]][2]
capacity$value
seq_along( capacity$value)
5 * 1e3
setwd("~/Github/message_ix_dev/ixmp")
# set in Github/local folder
rixmp_path=paste0(getwd(),"/retixmp/")
setwd(paste0(rixmp_path,"/source/"))
rixmp_path
setwd("~/Github/message_ix_dev/ixmp")
# set in Github/local folder
rixmp_path=paste0(getwd(),"/retixmp/")
setwd(paste0(rixmp_path,"/source/"))
# Build binary
devtools::build(pkg = ".", path=rixmp_path,binary=T)
getwd()
setwd("~/Github/message_ix_dev/ixmp")
#Build a developed R package to binary and display help
require(devtools)
# set in Github/local folder
rixmp_path=paste0(getwd(),"/retixmp/")
setwd(paste0(rixmp_path,"/source/"))
# Build binary
devtools::build(pkg = ".", path=rixmp_path,binary=T)
# install the package from binary
setwd(rixmp_path)
install.packages("retixmp_0.0.1.zip", repos=NULL)
pkg = "retixmp"
setwd(paste0(rixmp_path,"/source/"))
static_help = function(pkg, links = tools::findHTMLlinks()) {
pkgRdDB = tools:::fetchRdDB(file.path(find.package(pkg), 'help', pkg))
force(links); topics = names(pkgRdDB)
for (p in topics) {
tools::Rd2HTML(pkgRdDB[[p]], paste("./inst/docum/",p, '.html', sep = ''),
package = pkg, Links = links, no_links = is.null(links))
}
}
static_help(pkg,links = tools::findHTMLlinks())
print("Documentation created!!")
