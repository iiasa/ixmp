% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class_ixmp.Scenario.R
\docType{class}
\name{ixmp.Scenario}
\alias{ixmp.Scenario}
\title{Class ixmp.Scenario}
\description{
The class 'ixmp.Scenario' is a generic collection
of all data for a model instance (sets and parameters), as well as
the solution of a model run (levels/marginals of variables and equations).

The class includes functions to make changes to the data,
export all data to and import a solution from GAMS gdx,
and save the scenario to the IXMP database.
All changes are logged to facilitate version control.
}
\section{Fields}{

\describe{
\item{\code{.jobj}}{"jobjRef"}

\item{\code{.platform}}{"jobjRef"}

\item{\code{model}}{A character string.}

\item{\code{scenario}}{A character string.}

\item{\code{scheme}}{A character string.}
}}

\section{Methods}{

\describe{
\item{\code{add_cat(name, cat, keys, is_unique = FALSE)}}{add a set element key to the respective category mapping}

\item{\code{add_par(name, key, val, unit, comment = NULL)}}{add set elements}

\item{\code{add_set(name, key, comment = NULL)}}{add set elements}

\item{\code{cat(name, cat)}}{return a list of all set elements mapped to a category}

\item{\code{cat_list(name)}}{return a list of all categories for a set}

\item{\code{change_scalar(name, val = NULL, unit = NULL, comment = NULL)}}{change the value or unit of a scalar}

\item{\code{check_out(timeseries_only = FALSE)}}{check out the scenario from the database for making changes}

\item{\code{clone(new_model = model, new_scen = scenario, annotation, keep_sol = TRUE,
  shift_fyear = 0)}}{clone the the given scenario and return the new scenario}

\item{\code{commit(annotation)}}{commit all changes made to the scenario to the database}

\item{\code{discard_changes()}}{discard all changes, reload all items of the scenario from database}

\item{\code{element(ix_type, name, filters)}}{internal function to retrieve a dataframe of item elements}

\item{\code{equ(name, filters = NULL)}}{return a dataframe with equation elements (optional: filtered by index names)}

\item{\code{equ_list()}}{return a list of equations initialized in the scenario}

\item{\code{has_equ(name)}}{check whether the scenario has a equation with that name}

\item{\code{has_par(name)}}{check whether the scenario has a parameter with that name}

\item{\code{has_set(name)}}{check whether the scenario has a set with that name}

\item{\code{has_var(name)}}{check whether the scenario has a variable with that name}

\item{\code{idx_names(name)}}{return the list of index names for an item (set, par, var, equ)}

\item{\code{idx_sets(name)}}{return the list of index sets for an item (set, par, var, equ)}

\item{\code{init_equ(name, idx_sets = NULL, idx_names = NULL)}}{initialize a new equation in the scenario}

\item{\code{init_par(name, idx_sets, idx_names = NULL)}}{initialize a new parameter or scalar}

\item{\code{init_scalar(name, val, unit, comment = NULL)}}{initialize a new scalar and assign the value/unit}

\item{\code{init_set(name, idx_sets = NULL, idx_names = NULL)}}{initialize a new set in the scenario}

\item{\code{init_var(name, idx_sets = NULL, idx_names = NULL)}}{initialize a new variable in the datastrucutre}

\item{\code{initialize(platform, model, scen, javaobj)}}{initialize a new R-class Scenario object (via the ixmp.Platform class)}

\item{\code{is_default()}}{check whether this scenario is set as default in the database}

\item{\code{item(ix_type, name)}}{get an item from the scenario}

\item{\code{last_update()}}{get the timestamp of the last update/edit of this scenario}

\item{\code{par(name, filters = NULL)}}{return a dataframe of (optionally filtered by index name) elements for a specific parameter}

\item{\code{par_list()}}{return list of all parameters initialized in the scenario}

\item{\code{read_sol_from_gdx(path, filename, comment = NULL, var_list = NULL,
  equ_list = NULL, check_sol = TRUE)}}{read solution from GAMS gdx}

\item{\code{remove_par(name, key = NULL)}}{delete a parameter from the scenario or remove an element from a parameter (if key is specified)}

\item{\code{remove_set(name, key = NULL)}}{remove set or remove a specific element (or list of elements) from a set (if key is specified)}

\item{\code{remove_sol()}}{remove solution from run}

\item{\code{run_id()}}{get the run id of this scenario}

\item{\code{scalar(name)}}{return a dictionary of the value and unit for a scalar}

\item{\code{set(name, filters = NULL)}}{return a dataframe of (filtered) elements for a specific set}

\item{\code{set_as_default()}}{set this instance of a model scenario as default version}

\item{\code{set_list()}}{get list of all sets in the scenario}

\item{\code{solve(model = "MESSAGE", case = NULL, model_file = NULL, in_file = NULL,
  out_file = NULL, solve_args = NULL, comment = NULL, check_sol = TRUE)}}{solve the model (export to gdx, execute GAMS, import the solution)}

\item{\code{to_gdx(path, filename, include_var_equ = FALSE)}}{write the scenario to GAMS gdx}

\item{\code{var(name, filters = NULL)}}{return a dataframe with variable elements (optional: filtered by index names)}

\item{\code{var_list()}}{return a list of variables initialized in the scenario}

\item{\code{version()}}{get the version number of this scenario}

\item{\code{years_active(node, tec, yr_vtg)}}{return a list of years in which a technology of certain vintage at a specific node can be active}
}}

